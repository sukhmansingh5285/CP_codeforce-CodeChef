1. Classic Binary Search
Concept: Find target in sorted array Example: arr = [2,4,6,8,10,12], target = 8

Step 1: [2,4,6,8,10,12] mid=6  (8>6, go right)
Step 2: [8,10,12]       mid=10 (8<10, go left)
Step 3: [8]             mid=8  (found!)



2. Find First Occurrence
Concept: Find first position of target when duplicates exist Example: arr = [2,4,4,4,6,8], target = 4

Step 1: [2,4,4,4,6,8] mid=4  (found, but look left)
Step 2: [2,4]         mid=4  (found, but look left)
Step 3: [2]          no 4   (stop, return next position)



3. Find Last Occurrence
Concept: Find last position of target Example: arr = [2,4,4,4,6,8], target = 4

Step 1: [2,4,4,4,6,8] mid=4  (found, but look right)
Step 2: [4,4,6,8]     mid=4  (found, but look right)
Step 3: [6,8]        no 4   (stop, return prev position)



4. Search in Rotated Array
Concept: Find in sorted+rotated array Example: arr = [6,7,1,2,3,4,5], target = 2

Step 1: [6,7,1,2,3,4,5] mid=1  (check which half is sorted)
Step 2: [2,3,4,5]       mid=3  (2<3, go left)
Step 3: [2]             found!



5. Peak Element
Concept: Find local maximum Example: arr = [1,3,5,4,2]

Step 1: [1,3,5,4,2] mid=5  (5>4, look left)
Step 2: [1,3,5]     mid=3  (3<5, look right)
Step 3: [5]         found peak!



6. Square Root
Concept: Find floor of square root Example: Find √20

Range: [1-20]
Step 1: try 10: 10²=100 (too big)
Step 2: try 5:  5²=25   (too big)
Step 3: try 2:  2²=4    (too small)
Step 4: try 4:  4²=16   (too small)
Answer: 4




When to Use Binary Search:

Sorted array searches
Finding boundaries
Optimization problems with monotonic functions
Finding minimum in rotated array
Search space reduction problems



Pattern Recognition Tips:

Look for sorted data
"Find minimum/maximum value that satisfies..."
"First/Last occurrence of..."
Monotonic functions
Problems with clear boundaries



Key Variations to Remember:

Regular binary search (exact match)
Lower bound (first occurrence)
Upper bound (last occurrence)
Rotated array search
Answer lies in a range
Matrix binary search


Look for problems where you can reduce search space by half at each step. Most binary search problems require you to transform the 
problem into a form where you can make a yes/no decision at each step.